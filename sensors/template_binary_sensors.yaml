occupied:
  friendly_name: "Home Occupancy"
  device_class: occupancy
  value_template: >-
    {{ is_state('person.sarah', 'home')
      or is_state('person.nathan', 'home') }}

is_workday:
  value_template: >-
    {{
          is_state('calendar.ooo', 'off')
      and is_state('calendar.work_holiday', 'off')
      and now().weekday() < 5
    }}

is_during_workday:
  value_template: >-
    {{    is_state('binary_sensor.is_workday', 'on')
      and states('sensor.time') > states('input_datetime.work_start_time').rsplit(':',1)[0]
      and states('sensor.time') < states('input_datetime.work_end_time').rsplit(':',1)[0]
    }}

is_morning: 
  value_template: >- 
    {{
      as_timestamp(strptime(states('sensor.time'), '%H:%M')) + 600
      < as_timestamp(strptime(states('input_datetime.lunch_time'), '%H:%M:%S'))
    }}

is_lunch: 
  value_template: >-
    {{
      as_timestamp(strptime(states('sensor.time'), '%H:%M')) + 600
      >= as_timestamp(strptime(states('input_datetime.lunch_time'), '%H:%M:%S'))
      and
      as_timestamp(strptime(states('sensor.time'), '%H:%M')) + 600
      < as_timestamp(strptime(states('input_datetime.lunch_time'), '%H:%M:%S')) + 3600
    }}

is_afternoon: 
  value_template: >-
    {{
      as_timestamp(strptime(states('sensor.time'), '%H:%M')) + 600
      >= as_timestamp(strptime(states('input_datetime.lunch_time'), '%H:%M:%S')) + 3600
      and
      as_timestamp(strptime(states('sensor.time'), '%H:%M')) + 600
      < as_timestamp(strptime(states('input_datetime.work_end_time'), '%H:%M:%S'))
    }}

is_evening: 
  value_template: >-
    {{
        as_timestamp(strptime(states('sensor.time'), '%H:%M')) + 600
        >= as_timestamp(strptime(states('input_datetime.work_end_time'), '%H:%M:%S'))
    }}

everyone_in_bed:
  value_template: >-
    {{ 
        (
          is_state('binary_sensor.public_space_motion', 'off')
          and states('sensor.timestamp') | float >= (states.binary_sensor.public_space_motion.last_changed | as_timestamp) + 600
        )
        and is_state('binary_sensor.bedroom_door', 'off')
        and is_state('binary_sensor.occupied', 'on')
        and (
          is_state('input_boolean.visitors', 'off')
          or (
            is_state('input_boolean.visitors', 'on') and (is_state('binary_sensor.guest_bedroom_door', 'off') or True)
          )
        )
        and is_state('binary_sensor.is_bedtime', 'on')
        and is_state('group.bedroom_lights', 'off')
        and (
          is_state('input_boolean.visitors', 'off')
          or (
            is_state('input_boolean.visitors', 'on') and is_state('group.guest_bedroom_lights', 'off')
          )
        )
    }}

are_master_bedroom_people_home:
  friendly_name: "Are Sarah and Nathan Home"
  device_class: occupancy
  value_template: >-
    {{ is_state('person.sarah', 'home')
      or is_state('person.nathan', 'home') }}

public_space_motion:
  friendly_name: "Public Space Motion"
  device_class: motion
  value_template: >-
    {{ 
      is_state('binary_sensor.living_room_motion', 'on')
      or is_state('binary_sensor.wyze_motion3', 'on')
      or is_state('binary_sensor.wyze_motion4', 'on')
      or is_state('binary_sensor.wyze_motion5', 'on')
      or is_state('binary_sensor.basement_motion_sensor', 'on')
    }}


is_bedtime:
  friendly_name: "Is Bedtime"
  value_template: >-
    {{ states('sensor.time') > states('input_datetime.bedtime')
        or states('sensor.time') < states('input_datetime.morning') }}

# This just simply tracks the template switch. It's here so Alexa
# can make a routine to turn off the physical switch
guest_air_freshener:
  device_class: door
  friendly_name: "Guest Air Freshener"
  value_template: >-
    {{ is_state('switch.guest_air_freshener', 'on') }}
